Timer unit: 1e-06 s

Total time: 6.11529 s
File: <ipython-input-6-289e288024c2>
Function: ga_optimizer at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def ga_optimizer(obj_func, parameters):
     2                                               """
     3                                           
     4                                               Inspired by:
     5                                               https://github.com/7ossam81/EvoloPy/blob/master/GA.py
     6                                           
     7                                               """
     8         1          3.0      3.0      0.0      lower = parameters.get('lower', [-1.0])
     9         1          2.0      2.0      0.0      upper = parameters.get('upper', [1.0])
    10         1          1.0      1.0      0.0      dimension = parameters.get('dimension', 30)
    11         1          1.0      1.0      0.0      seed = parameters.get('seed', 1)
    12         1          1.0      1.0      0.0      max_iterations = parameters.get('max_iterations', 100)
    13         1          1.0      1.0      0.0      population = parameters.get('population', 100)
    14         1          1.0      1.0      0.0      crossover_rate = parameters.get('crossover_rate', 1.0)
    15         1          1.0      1.0      0.0      mutation_rate = parameters.get('mutation_rate', 0.01)
    16         1          1.0      1.0      0.0      best_to_keep = parameters.get('best_to_keep', 2)
    17         1          1.0      1.0      0.0      crossover_alpha = parameters.get('crossover_alpha', 0.25)
    18         1          1.0      1.0      0.0      max_eval = parameters.get('max_eval', 0)
    19         1          1.0      1.0      0.0      verbose = parameters.get('verbose', 0)
    20                                               
    21         1         21.0     21.0      0.0      np.random.seed(seed)
    22                                               
    23                                               # Input Objective function has variable dimensions
    24                                               # consider equi-distance "square"
    25         1          2.0      2.0      0.0      if not isinstance(lower, list):
    26                                                   lower = [lower]
    27         1          2.0      2.0      0.0      if not isinstance(upper, list):
    28                                                   upper = [upper]
    29                                           
    30         1          1.0      1.0      0.0      lower = lower * dimension
    31         1          1.0      1.0      0.0      upper = upper * dimension
    32                                           
    33                                               # track execution
    34         1          2.0      2.0      0.0      exec_info = execution_dict.copy()
    35         1          1.0      1.0      0.0      n_eval = 0
    36                                               
    37                                               # allocate memory
    38         1         12.0     12.0      0.0      exec_info['metrics']['time'] = np.zeros([max_iterations], dtype='float')
    39         1          7.0      7.0      0.0      exec_info['metrics']['best'] = np.zeros([max_iterations, dimension], dtype='float')
    40         1          3.0      3.0      0.0      exec_info['metrics']['objective'] = np.zeros([max_iterations], dtype='float')
    41         1         54.0     54.0      0.0      exec_info['metrics']['scores'] = np.full([max_iterations, population], np.inf, dtype='float')
    42                                           
    43         1          2.0      2.0      0.0      begin = time.time()
    44                                           
    45         1         47.0     47.0      0.0      space = np.random.uniform(0, 1, [population, dimension])
    46         1          7.0      7.0      0.0      scores = np.random.uniform(0.0, 1.0, population)
    47                                               
    48         1          2.0      2.0      0.0      def crossover(space, scores):
    49                                                   #population, dimension = space.shape
    50                                                   search_space = np.zeros_like(space) + np.random.uniform(0, 1)
    51                                                   #search_space = np.zeros_like(space)
    52                                                   search_space[0:best_to_keep, :] = space[0:best_to_keep, :]
    53                                                   
    54                                                   # renew BETA every generation
    55                                                   beta = np.random.uniform(-crossover_alpha, 1 + crossover_alpha)
    56                                                   
    57                                                   for cross  in range(best_to_keep + 1, population - 1, 2):
    58                                           
    59                                                       # using SET parents will always be different
    60                                                       #parents = set()
    61                                                       
    62                                                       # using LIST parents can repeat!
    63                                                       parents = []
    64                                                       
    65                                                       parent1_idx = np.random.randint(0, population)
    66                                                       parent2_idx = np.random.randint(0, population)
    67                                                       
    68                                                       parents.append(parent1_idx)
    69                                                       parents.append(parent2_idx)
    70                                           
    71                                                       """
    72                                                       while len(parents) < 2:
    73                                                           parent1_idx = np.random.randint(0, population)
    74                                                           parent2_idx = np.random.randint(0, population)
    75                                                       
    76                                                           if scores[parent1_idx] > scores[parent2_idx]:
    77                                                               # p1 is better then p2
    78                                                               parents.add(parent1_idx)
    79                                                           else:
    80                                                               parents.add(parent2_idx)               
    81                                                       """
    82                                                       
    83                                                       lp = list(parents)
    84                                                       parent1 = space[lp[0], :]
    85                                                       parent2 = space[lp[1], :]
    86                                                       
    87                                                       # ARITHMETIC CROSSOVER
    88                                                       child1 = parent1 * beta + (1.0 - beta) * parent2
    89                                                       child2 = parent2 * beta + (1.0 - beta) * parent1
    90                                                       
    91                                                       crossover_chance = np.random.uniform(0.0, 1.0)
    92                                           
    93                                                       if crossover_chance < crossover_rate:
    94                                                           search_space[cross, :] = np.copy(child1)
    95                                                           search_space[cross + 1, :] = np.copy(child2)  
    96                                                       else:
    97                                                           search_space[cross, :] = np.copy(parent1)
    98                                                           search_space[cross + 1, :] = np.copy(parent2)
    99                                                       
   100                                                       for j in range(dimension):
   101                                                           search_space[cross, j] = np.clip(search_space[cross, j], lower[j], upper[j])
   102                                                           search_space[cross + 1, j] = np.clip(search_space[cross + 1, j], lower[j], upper[j])
   103                                                           
   104                                                   return search_space
   105                                               
   106         1          1.0      1.0      0.0      def mutation(space, gen):
   107                                                   n_mutate = np.int(population * mutation_rate)
   108                                                   for m in range(n_mutate):
   109                                                       # keep best => do not mutate
   110                                                       rand_individual = np.random.randint(best_to_keep + 1, population)
   111                                                       #rand_individual = np.random.randint(0, population)
   112                                                       # decrease stdev with generations
   113                                                       #stdev = 5.0 / np.sqrt(gen + 1)
   114                                                       stdev = 2
   115                                                       new_value = np.zeros(dimension)
   116                                                       for j in range(dimension):
   117                                                           new_value[j] = np.random.normal(space[rand_individual, j], stdev)
   118                                                           new_value[j] = np.clip(new_value[j], lower[j], upper[j])
   119                                           
   120                                                       # store
   121                                                       space[rand_individual, :] = new_value
   122                                           
   123                                                   return space
   124                                               
   125         1          1.0      1.0      0.0      def sort_iter(_space, _scores):
   126                                                   idx = scores.argsort()
   127                                                   _space = _space[idx]
   128                                                   _scores = _scores[idx]
   129                                                   return _space, _scores
   130                                               
   131         1          1.0      1.0      0.0      def eval_obj(func, _space):
   132                                                   _scores = np.full(population, np.inf)
   133                                                   for p in range(population):
   134                                                       _scores[p] = func(_space[p, :])
   135                                                   return _scores
   136                                           
   137        31         40.0      1.3      0.0      for i in range(dimension):
   138                                                   # init search space inside bounds
   139        30        320.0     10.7      0.0          space[:, i] = np.random.uniform(0, 1, population) * (upper[i] - lower[i]) + lower[i]
   140                                               
   141       101        130.0      1.3      0.0      for _iter in range(0, max_iterations):
   142                                                   
   143                                                   # crossover
   144       100    5855775.0  58557.8     95.8          space = crossover(space, scores)
   145                                                   
   146                                                   # mutation
   147       100      73577.0    735.8      1.2          space = mutation(space, _iter)
   148                                                   
   149                                                   # evaluate objective
   150       100     182686.0   1826.9      3.0          scores = eval_obj(obj_func, space)
   151       100        188.0      1.9      0.0          n_eval += population
   152                                                   
   153                                                   # remove duplicates
   154                                                   
   155                                                   # sort
   156       100       1527.0     15.3      0.0          space, scores = sort_iter(space, scores)
   157                                                   
   158                                                   # save
   159       100        277.0      2.8      0.0          exec_info['metrics']['scores'][_iter] = scores
   160       100        241.0      2.4      0.0          exec_info['metrics']['time'][_iter] = time.time() - begin
   161       100        217.0      2.2      0.0          exec_info['metrics']['best'][_iter] = space[0, :]
   162                                                   
   163       100        125.0      1.2      0.0          if verbose and _iter % np.int((max_iterations + 1) / 5) == 0:
   164                                                       print(f'\t\tGen {_iter:06d}, '
   165                                                             f'f_min = {scores[0]:+13.5e}, '
   166                                                       )
   167                                           
   168                                                   #if max_eval > 0 and _iter > max_eval:
   169                                                   #    break
   170                                           
   171         1          1.0      1.0      0.0      exec_info['algorithm'] = 'GA - Genetic Algorithm'
   172         1          1.0      1.0      0.0      exec_info['time_elapsed'] = time.time() - begin
   173         1          1.0      1.0      0.0      exec_info['n_eval'] = n_eval
   174                                               
   175         1          2.0      2.0      0.0      return exec_info